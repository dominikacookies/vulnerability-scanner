import uuid
import time
import threading
from argparse import ArgumentParser
from leader_agent import LeaderAgent
from worker_agent import WorkerAgent

leader = None

def validate_args(args):
    """
    Checks if arguments are valid.

    Args:
        args (Namespace): parsed command-line arguments.
    Raises:
        ValueError: if arguments are invalid.
    """
    if args.agents < 2:
        raise ValueError(
            f"--agents must be an integer greater than or equal to 2 (got {args.agents})")

def run_agent(agent_number: int, directory_path: str, process_id: str):
    """
    Runs a leader or worker agent

    Args:
        agent_number (int): the number of the agent. This is used to stagger agent start times by
                            invoking a sleep time that is a multiple of the agent number.
        directory_path (str): path to the directory of files to be scanned.
        process_id (str): unique identifier for the process. This prevents file creation errors 
                          (e.g. if the quatantine directory already exists) when the user runs 
                          the program multiple times in the same environment
    """
    global leader
    delay = agent_number * 0.35
    time.sleep(delay)

    if leader is None:
        leader = LeaderAgent(directory_path, process_id)
        leader.initalise_scanning_environment()
        time.sleep(0.9)  # allow some time for workers to start scanning
        while leader.get_workers():
            leader.poll_agent_log_files()
        leader.generate_report()
    else:
        agent_uuid = uuid.uuid4()
        worker = WorkerAgent(agent_uuid, leader, process_id)
        leader.add_worker(worker)

        while worker.scan_files():
            pass

def main():
    """
    Main function to parse command-line arguments and start agent threads.
    """
    parser = ArgumentParser()
    parser.add_argument('--agents', help="number of agents",
                        type=int, required=True)
    parser.add_argument('--dir', '--directory-path',
                        help="path to directory program should inspect", required=True)
    args = parser.parse_args()

    try:
        validate_args(args)
    except ValueError:
        return

    threads = []
    process_id = uuid.uuid4()
    # run agents in parallel threads to allow multiple files to be scanned at once, 
    # reducing time required for completion
    for agent_number in range(args.agents):
        thread = threading.Thread(
            target=run_agent, args=(agent_number, args.dir, process_id))
        threads.append(thread)
        thread.start()

if __name__ == '__main__':
    main()
