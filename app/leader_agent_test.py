import unittest
from unittest.mock import patch, mock_open
from leader_agent import LeaderAgent
import datetime

class TestLeaderAgent(unittest.TestCase):

    def setUp(self):
        self.search_dir = 'dir'
        self.process_id = '123abc'
        self.quarantine_dir = f'./{self.process_id}/quarantine'
        self.leader_agent = LeaderAgent(self.search_dir, self.process_id)

    @patch('leader_agent.os')
    def test_get_all_file_paths(self, mock_os):
        directory = '/test_dir'
        mock_os.walk.return_value = [(directory, [], ['file1.txt', 'file2.txt', 'subdir/file3.txt'])]
        mock_os.path.join.side_effect = lambda dir, file: f"{dir}/{file}"
        file_paths = self.leader_agent.get_all_file_paths(directory)
        self.assertEqual(file_paths, [f'{directory}/file1.txt', f'{directory}/file2.txt', f'{directory}/subdir/file3.txt'])

    @patch('leader_agent.WorkerAgent')
    def test_add_worker(self, mockWorker):
        worker = mockWorker()
        self.leader_agent.add_worker(worker)
        self.assertEqual(len(self.leader_agent.workers), 1)

    def test_agent_recently_active(self):
        leader_agent = LeaderAgent('/test_dir', '12345')
        time_now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
        with patch('leader_agent.open', mock_open(read_data=f'Timestamp: {time_now} | File: test_file.txt\n')) as mock_open_fn:
            active = leader_agent.agent_recently_active('test_log.txt')
            self.assertTrue(active)

    @patch('leader_agent.WorkerAgent')
    @patch('leader_agent.LeaderAgent.start_worker')
    @patch('leader_agent.LeaderAgent.terminate_worker')
    @patch('leader_agent.LeaderAgent.agent_recently_active')
    @patch('leader_agent.time.sleep', return_value=None)
    def test_poll_agent_log_files_worker_active(self, mock_sleep, mock_recently_active, mock_terminate_worker, mock_start_worker, mock_worker):
        workers = [mock_worker()]
        self.leader_agent.workers = workers
        mock_recently_active.return_value = True

        self.leader_agent.poll_agent_log_files()

        mock_terminate_worker.assert_not_called()
        mock_start_worker.assert_not_called()
        mock_sleep.assert_called_with(60)
    
    @patch('leader_agent.WorkerAgent')
    @patch('leader_agent.LeaderAgent.start_worker')
    @patch('leader_agent.LeaderAgent.terminate_worker')
    @patch('leader_agent.LeaderAgent.agent_recently_active')
    @patch('leader_agent.time.sleep', return_value=None)
    def test_poll_agent_log_files_worker_inactive(self, mock_sleep, mock_recently_active, mock_terminate_worker, mock_start_worker, mock_worker):
        worker = mock_worker()
        workers = [worker]
        self.leader_agent.workers = workers
        mock_recently_active.return_value = False

        self.leader_agent.poll_agent_log_files()

        mock_terminate_worker.assert_called_with(worker)
        mock_start_worker.assert_called()
        mock_sleep.assert_called_with(60)

    @patch('leader_agent.WorkerAgent')
    def test_terminate_worker(self, mock_worker):
        mock_current_file = 'file.txt'
        mock_log_file_path = 'log.txt'
        mock_agent_id = '1234'
        mock_worker.get_current_file.return_value = mock_current_file
        worker = mock_worker()
        worker.log_file_path = mock_log_file_path
        worker.agent_id = mock_agent_id

        self.leader_agent.workers = [worker]
        self.leader_agent.terminate_worker(worker)

        self.assertNotIn(worker, self.leader_agent.workers)

    @patch('leader_agent.threading.Thread')
    @patch('leader_agent.LeaderAgent.add_worker')
    @patch('leader_agent.WorkerAgent')
    @patch('leader_agent.uuid')
    def test_start_worker(self, mock_uuid, mock_worker, mock_add_worker, mock_thread,):
        uuid = '1234'
        mock_uuid.uuid4.return_value = uuid

        self.leader_agent.start_worker()

        mock_worker.assert_called_with(uuid, self.leader_agent, self.leader_agent.process_id)
        mock_add_worker.assert_called_once()        

    @patch('leader_agent.WorkerAgent')
    def test_get_workers(self, mock_worker):
        mock_workers =  [mock_worker(), mock_worker()]
        
        self.leader_agent.workers = mock_workers

        workers = self.leader_agent.get_workers()

        self.assertEqual(workers, mock_workers)

if __name__ == '__main__':
    unittest.main()
